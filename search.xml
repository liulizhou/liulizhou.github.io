<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>libtorch和gflags的编译安装问题</title>
      <link href="/2018/11/15/gflags-and-libtorch-compile-problem/"/>
      <url>/2018/11/15/gflags-and-libtorch-compile-problem/</url>
      
        <content type="html"><![CDATA[<p>这篇文章记录了gflags的安装、libtorch的安装以及过程中的一些问题<br><a id="more"></a></p><h1 id="gflags说明"><a href="#gflags说明" class="headerlink" title="gflags说明"></a>gflags说明</h1><h1 id="libtorch说明"><a href="#libtorch说明" class="headerlink" title="libtorch说明"></a>libtorch说明</h1><h1 id="gflags安装"><a href="#gflags安装" class="headerlink" title="gflags安装"></a>gflags安装</h1><h1 id="libtorch安装"><a href="#libtorch安装" class="headerlink" title="libtorch安装"></a>libtorch安装</h1><h1 id="bug-gflags和libtorch冲突问题"><a href="#bug-gflags和libtorch冲突问题" class="headerlink" title="[bug] gflags和libtorch冲突问题"></a>[bug] gflags和libtorch冲突问题</h1><p>我们可能在CMakeList.txt文件中像这样链接gflags和libtorch的库(error):</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">target_link_libraries(pycvt <span class="string">"$&#123;TORCH_LIBRARIES&#125;"</span> gflags)</span><br><span class="line">备注：其中的pycvt是程序名。</span><br></pre></td></tr></table></figure><p>文件CMakeList.txt中的链接命令是没有问题的，但是我们make编译链接库的过程中，可能会出现下面的问题：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">CMakeFiles/pycvt.dir/pycvt.cpp.o：在函数‘main’中：</span><br><span class="line">pycvt.cpp:(.text+<span class="number">0xe1</span>)：对‘google::ParseCommandLineFlags(int*, char***, bool)’未定义的引用</span><br><span class="line">CMakeFiles/pycvt.dir/pycvt.cpp.o：在函数‘__static_initialization_and_destruction_0(int, int)’中：</span><br><span class="line">pycvt.cpp:(.text+<span class="number">0x4c5</span>)：对‘google::FlagRegisterer::FlagRegisterer&lt;std::string&gt;(char const*, char const*, char const*, std::string*, std::string*)’未定义的引用</span><br><span class="line">pycvt.cpp:(.text+<span class="number">0x568</span>)：对‘google::FlagRegisterer::FlagRegisterer&lt;std::string&gt;(char const*, char const*, char const*, std::string*, std::string*)’未定义的引用</span><br><span class="line">pycvt.cpp:(.text+<span class="number">0x60b</span>)：对‘google::FlagRegisterer::FlagRegisterer&lt;std::string&gt;(char const*, char const*, char const*, std::string*, std::string*)’未定义的引用</span><br><span class="line">pycvt.cpp:(.text+<span class="number">0x6ae</span>)：对‘google::FlagRegisterer::FlagRegisterer&lt;std::string&gt;(char const*, char const*, char const*, std::string*, std::string*)’未定义的引用</span><br><span class="line">pycvt.cpp:(.text+<span class="number">0x709</span>)：对‘google::FlagRegisterer::FlagRegisterer&lt;int&gt;(char const*, char const*, char const*, int*, int*)’未定义的引用</span><br><span class="line">pycvt.cpp:(.text+<span class="number">0x72e</span>)：对‘google::FlagRegisterer::FlagRegisterer&lt;int&gt;(char const*, char const*, char const*, int*, int*)’未定义的引用</span><br><span class="line">pycvt.cpp:(.text+<span class="number">0x79b</span>)：对‘google::FlagRegisterer::FlagRegisterer&lt;std::string&gt;(char const*, char const*, char const*, std::string*, std::string*)’未定义的引用</span><br><span class="line">pycvt.cpp:(.text+<span class="number">0x83e</span>)：对‘google::FlagRegisterer::FlagRegisterer&lt;std::string&gt;(char const*, char const*, char const*, std::string*, std::string*)’未定义的引用</span><br></pre></td></tr></table></figure><p>出现这个问题的原因是libtorch中自带了gflags（在c10命名空间下），所以如果我们想使用gflags, 用libtorch自带的就可以了，比如gflags中是这样添加命令的：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DEFINE_string(model, <span class="string">"valid"</span>, <span class="string">"the torch model path"</span>);</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gflags::ParseCommandLineFlags(&amp;argc, &amp;argv, <span class="literal">true</span>);</span><br></pre></td></tr></table></figure><p>我们换成libtorch库下的gflags，应该是这样的：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C10_DEFINE_string(model, <span class="string">"valid"</span>, <span class="string">"the torch model path"</span>);</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c10::ParseCommandLineFlags(&amp;argc, &amp;argv);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> gflags </category>
          
          <category> libtorch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gflags </tag>
            
            <tag> libtorch </tag>
            
            <tag> install </tag>
            
            <tag> bug </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>各种安装BUG记录</title>
      <link href="/2018/11/07/install-problems-index/"/>
      <url>/2018/11/07/install-problems-index/</url>
      
        <content type="html"><![CDATA[<p>本博客是一个系列博客，记录了我碰到的各种软件安装问题。<br><a id="more"></a></p><h1 id="Anaconda安装opencv3"><a href="#Anaconda安装opencv3" class="headerlink" title="Anaconda安装opencv3"></a>Anaconda安装opencv3</h1><p>最常见的使用Anaconda安装opencv3的命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda install -c menpo opencv3</span><br></pre></td></tr></table></figure><p>如果使用上述命令，可能会出现包冲突问题，我使用conda5.3.0=py37,出现了以下包冲突问题：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">UnsatisfiableError: The following specifications were found to be <span class="keyword">in</span> conflict:</span><br><span class="line">- anaconda5.3.0=py37_0 -&gt; hdf51.10.2=hba1933b_1</span><br><span class="line">- anaconda5.3.0=py37_0 -&gt; mkl-service1.1.2=py37h90e4bf4_5</span><br><span class="line">- anaconda5.3.0=py37_0 -&gt; numexpr2.6.8=py37hd89afb7_0</span><br><span class="line">- anaconda5.3.0=py37_0 -&gt; pango1.42.4=h049681c_0 -&gt; harfbuzz[version='&gt;=1.7.6,&lt;2.0a0']&gt; - anaconda5.3.0=py37_0 -&gt; scikit-learn0.19.2=py37h4989274_0</span><br><span class="line">- opencv3</span><br></pre></td></tr></table></figure><p>解决这个问题参考了<a href="https://github.com/ContinuumIO/anaconda-issues/issues/1674" target="_blank" rel="noopener">这个网址</a>，使用下面的命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda install -c conda-forge opencv</span><br></pre></td></tr></table></figure><h1 id="eclipse-c-中不能添加带版本号的库"><a href="#eclipse-c-中不能添加带版本号的库" class="headerlink" title="eclipse c++中不能添加带版本号的库"></a>eclipse c++中不能添加带版本号的库</h1><p>这里以libtorch为例来说明这个情况。</p><p>我们下载libtorch后，解压得到libtorch库如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">libbenchmark.a                    libcaffe2_protos.a     libcudart<span class="number">-5</span>d6d23a3.so<span class="number">.8</span><span class="number">.0</span><span class="number">.61</span>  libnnpack.a                   libnvToolsExt<span class="number">-422e3301</span>.so<span class="number">.1</span>  libonnx_proto.a     libshm.so</span><br><span class="line">libbenchmark_main.a               libcaffe2.so           libgomp<span class="number">-7</span>bcb08ae.so           libnnpack_reference_layers.a  libonnx.a                    libprotobuf.a       libtorch.so</span><br><span class="line">libc10.so                         libclog.a              libgomp<span class="number">-7</span>bcb08ae.so<span class="number">.1</span>         libnvrtc<span class="number">-56</span>d4825a.so          libonnxifi_dummy.so          libprotobuf-lite.a  libtorch.so<span class="number">.1</span></span><br><span class="line">libcaffe2_gpu.so                  libcpuinfo.a           libgtest.a                    libnvrtc<span class="number">-56</span>d4825a.so<span class="number">.8</span><span class="number">.0</span><span class="number">.61</span>   libonnxifi_loader.a          libprotoc.a</span><br><span class="line">libcaffe2_module_test_dynamic.so  libcudart<span class="number">-5</span>d6d23a3.so  libgtest_main.a               libnvrtc-builtins.so          libonnxifi.so                libpthreadpool.a</span><br></pre></td></tr></table></figure><p>上面的库中，我们主要使用libtorch.so, 我们ldd看下libtorch.so的依赖项：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ldd libtorch.so</span><br></pre></td></tr></table></figure><p>得到下面的依赖项：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">maxliu@maxliu-tp:/data/source/libtorch/lib$ ldd libtorch.so</span><br><span class="line">        linux-vdso.so.1 =&gt;  (0x00007ffc1d396000)</span><br><span class="line">        libnvToolsExt-422e3301.so.1 =&gt; /data/source/libtorch/lib/libnvToolsExt-422e3301.so.1 (0x00007f83c70de000)</span><br><span class="line">        libdl.so.2 =&gt; /lib/x86_64-linux-gnu/libdl.so.2 (0x00007f83c6eda000)</span><br><span class="line">        librt.so.1 =&gt; /lib/x86_64-linux-gnu/librt.so.1 (0x00007f83c6cd2000)</span><br><span class="line">        libcaffe2.so =&gt; /data/source/libtorch/lib/libcaffe2.so (0x00007f83be54d000)</span><br><span class="line">        libcaffe2_gpu.so =&gt; /data/source/libtorch/lib/libcaffe2_gpu.so (0x00007f839ce71000)</span><br><span class="line">        libc10.so =&gt; /data/source/libtorch/lib/libc10.so (0x00007f839cc59000)</span><br><span class="line">        libpthread.so.0 =&gt; /lib/x86_64-linux-gnu/libpthread.so.0 (0x00007f839ca3c000)</span><br><span class="line">        libm.so.6 =&gt; /lib/x86_64-linux-gnu/libm.so.6 (0x00007f839c733000)</span><br><span class="line">        libstdc++.so.6 =&gt; /usr/lib/x86_64-linux-gnu/libstdc++.so.6 (0x00007f839c3b1000)</span><br><span class="line">        libgcc_s.so.1 =&gt; /lib/x86_64-linux-gnu/libgcc_s.so.1 (0x00007f839c19b000)</span><br><span class="line">        libc.so.6 =&gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007f839bdd1000)</span><br><span class="line">        /lib64/ld-linux-x86<span class="number">-64.</span>so<span class="number">.2</span> (<span class="number">0x00007f83c809b000</span>)</span><br><span class="line">        libgomp-7bcb08ae.so.1 =&gt; /data/source/libtorch/lib/libgomp-7bcb08ae.so.1 (0x00007f839bba7000)</span><br></pre></td></tr></table></figure><p>我们可以看到libtorch.so依赖libnvToolsExt-422e3301.so.1，这个so文件带版本号，而我们在eclipse中添加库时，只能添加so文件的名字，也就是nvToolsExt-422e3301, eclipse调用g++使用参数-l进行链接，即-lnvToolsExt-422e3301，在实际链接库会自动补上前缀lib和后缀so，所以无法找到带版本号的库，碰到这个问题，我目前还没有找到解决方法，不行的话我们还是写CMakeList来解决吧。</p>]]></content>
      
      
      <categories>
          
          <category> Install Problem </category>
          
      </categories>
      
      
        <tags>
            
            <tag> install </tag>
            
            <tag> index </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>linux-mount-command</title>
      <link href="/2018/11/07/linux-mount-command/"/>
      <url>/2018/11/07/linux-mount-command/</url>
      
        <content type="html"><![CDATA[<p>这篇博客主要探讨了磁盘（包括U盘）分区和挂载的一些问题。<br><a id="more"></a></p><h1 id="探讨的问题说明"><a href="#探讨的问题说明" class="headerlink" title="探讨的问题说明"></a>探讨的问题说明</h1><ul><li>Linux中的文件系统</li><li>如何对新硬盘进行分区并挂载</li><li>如何对U盘进行挂载</li></ul><h1 id="linux中的文件系统"><a href="#linux中的文件系统" class="headerlink" title="linux中的文件系统"></a>linux中的文件系统</h1><p>首先我们认识下linux中的文件系统</p><h1 id="如何对新硬盘进行分区并挂载"><a href="#如何对新硬盘进行分区并挂载" class="headerlink" title="如何对新硬盘进行分区并挂载"></a>如何对新硬盘进行分区并挂载</h1><p>写作参考网址：<a href="http://www.cnblogs.com/fieldtianye/p/9295986.html" target="_blank" rel="noopener">http://www.cnblogs.com/fieldtianye/p/9295986.html</a></p><h1 id="如何对U盘进行挂载"><a href="#如何对U盘进行挂载" class="headerlink" title="如何对U盘进行挂载"></a>如何对U盘进行挂载</h1>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> command </tag>
            
            <tag> mount </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>i3wm-using-skills</title>
      <link href="/2018/09/30/i3wm-using-skills/"/>
      <url>/2018/09/30/i3wm-using-skills/</url>
      
        <content type="html"><![CDATA[<p>这篇文章记录的是linux下i3窗口管理器的使用方法和技巧<br><a id="more"></a></p>]]></content>
      
      
      <categories>
          
          <category> i3 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> i3 </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>tmux-using-skills</title>
      <link href="/2018/09/30/tmux-using-skills/"/>
      <url>/2018/09/30/tmux-using-skills/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Pytorch API中的卷积与反卷积操作</title>
      <link href="/2018/09/27/pytorch-api-Conv-Deconv/"/>
      <url>/2018/09/27/pytorch-api-Conv-Deconv/</url>
      
        <content type="html"><![CDATA[<p>本篇文章解析卷积与反卷积操作以及Pytorch中的相关API<br><a id="more"></a></p>]]></content>
      
      
      <categories>
          
          <category> pytorch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pytorch </tag>
            
            <tag> api </tag>
            
            <tag> 卷积，反卷积 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hexo搭建个人Blog记录</title>
      <link href="/2018/09/20/hexo-next-blog/"/>
      <url>/2018/09/20/hexo-next-blog/</url>
      
        <content type="html"><![CDATA[<p>记录了整个站点搭建的过程<br><a id="more"></a></p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>图像视频质量</title>
      <link href="/2018/09/20/image-video-quality/"/>
      <url>/2018/09/20/image-video-quality/</url>
      
        <content type="html"><![CDATA[<p>探究图像和视频质量问题<br><a id="more"></a></p>]]></content>
      
      
      <categories>
          
          <category> Image Process </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AR </tag>
            
            <tag> IQ </tag>
            
            <tag> VQ </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Compression Artifacts Removal Using Convolutional Neural Networks</title>
      <link href="/2018/09/20/iccv-2015-arcnn/"/>
      <url>/2018/09/20/iccv-2015-arcnn/</url>
      
        <content type="html"><![CDATA[<p>论文分析，文章2015年发表在ICCV上，使用深度学习做压缩失真消除<br><a id="more"></a></p><p>这是ICCV2015年的一篇文章，算是比较早用深度学习做压缩失真消除，后面的大多数方法都是与这篇文章里面的去除效果做对比。</p>]]></content>
      
      
      <categories>
          
          <category> Deep Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AR </tag>
            
            <tag> CNN </tag>
            
            <tag> ICCV </tag>
            
            <tag> Paper </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Deep Generative Adversarial Compression Artifact Removal</title>
      <link href="/2018/09/20/iccv-2017-gan-ar/"/>
      <url>/2018/09/20/iccv-2017-gan-ar/</url>
      
        <content type="html"><![CDATA[<p>论文分析，文章2017年发表在ICCV上，使用GAN做压缩失真消除<br><a id="more"></a></p><p>这篇文章是2017年ICCV的一篇文章， 主要是用GAN做压缩失真的消除，关于图像和视频压缩失真，前面的文章已经讨论过这个问题，感兴趣的可以查看这篇博客。</p><h3 id="整体思路"><a href="#整体思路" class="headerlink" title="整体思路"></a>整体思路</h3><p>研究深度网络主要关注一下几点：</p><ul><li>网络架构：本文使用GAN，一个生成网络和一个判别网络，生成网络使用的一个9层的餐差结构</li></ul><p>本文使用GAN，一个生成网络和一个判别网络</p><h3 id="网络结构"><a href="#网络结构" class="headerlink" title="网络结构"></a>网络结构</h3><p>下图是整个网络结构的架构图</p><h3 id="损失函数"><a href="#损失函数" class="headerlink" title="损失函数"></a>损失函数</h3><h3 id="训练"><a href="#训练" class="headerlink" title="训练"></a>训练</h3><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3>]]></content>
      
      
      <categories>
          
          <category> Deep Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AR </tag>
            
            <tag> ICCV </tag>
            
            <tag> Paper </tag>
            
            <tag> GAN </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>liulizhou</title>
      <link href="/2018/09/20/liulizhou/"/>
      <url>/2018/09/20/liulizhou/</url>
      
        <content type="html"><![CDATA[<p>Hello Kitty</p>]]></content>
      
      
      <categories>
          
          <category> 人物 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cute </tag>
            
            <tag> hansome </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
